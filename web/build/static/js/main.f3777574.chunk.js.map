{"version":3,"sources":["components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonAppBar","Box","sx","flexGrow","AppBar","position","className","Toolbar","Typography","variant","component","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","submit","values","a","resetForm","console","log","addDoc","collection","item","docRef","id","error","validationSchema","yup","min","required","deleteDoc","doc","App","useState","Data","setData","useEffect","q","query","unsubscribe","onSnapshot","snapshot","temp","forEach","data","unshift","formik","useFormik","initialValues","onSubmit","element","Container","handleSubmit","TextField","name","label","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","color","type","IconButton","size","onClick","map","eachUser","i","del","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3777574.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nexport default function ButtonAppBar() {\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position=\"static\" className=\"navbar\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }} className=\"navbartext\">\r\n            ToDo App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}","import { addDoc, collection, query, onSnapshot, doc, deleteDoc } from \"firebase/firestore\";\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from \"@mui/material/Button\";\nimport { TextField } from '@mui/material';\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\"\nimport IconButton from '@mui/material/IconButton';\nimport DenseAppBar from \"./components/Navbar\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Container } from '@mui/material';\n\n\n\n//Details of API\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCZ8bAR4UwbUeyEDK8-oqdqitCrj89f7yk\",\n  authDomain: \"firestoretodo-2f998.firebaseapp.com\",\n  projectId: \"firestoretodo-2f998\",\n  storageBucket: \"firestoretodo-2f998.appspot.com\",\n  messagingSenderId: \"468694813019\",\n  appId: \"1:468694813019:web:ea6c217539bdfacfaa727e\",\n  measurementId: \"G-07CYSB24NS\"\n};\n\n\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\n\n//Handler For API\nconst db = getFirestore();\n\n\n\n//onsubmit function\nasync function submit(values, { resetForm }) {\n  console.log(\"values\", values)\n  try {\n    const docRef = await addDoc(collection(db, \"ToDolist\"), {\n      item: values.item,\n\n    });\n    console.log(\"Document written with ID: \", docRef.id);\n    //resting input field after submitt\n    resetForm({})\n\n  } catch (e) {\n    console.error(\"Error adding document: \", e);\n  }\n\n}\n\n\n//validation schema \nconst validationSchema = yup.object({\n  item: yup\n    .string('Enter your item')\n    .min(3, 'item should be of minimum 3 characters length')\n    .required('item is required'),\n});\n\n\nasync function del(id) {\n  await deleteDoc(doc(collection(db, \"ToDolist\"), id));\n}\n\n\n\n\nfunction App() {\n\n  const [Data, setData] = useState([])\n\n\n\n\n\n\n  useEffect(() => {\n\n    const q = query(collection(db, \"ToDolist\"));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n\n      let temp = [];\n      snapshot.forEach((doc) => {\n\n        let id = doc.id;\n        let data = doc.data();\n\n        temp.unshift({\n          id: id,\n          item: data.item,\n        });\n      })\n      setData(temp)\n    });\n\n    return () => {\n      unsubscribe()\n      console.log(\"unsub\")\n    };\n  }, []);\n\n\n\n  //getting data in object\n  const formik = useFormik({\n    validationSchema: validationSchema,\n    initialValues: {\n      item: '',\n    },\n    onSubmit: submit\n  },\n  );\n\n  async function deleteAllitems() {\n\n    Data.forEach(async (element) => {\n      await deleteDoc(doc(collection(db, \"ToDolist\"), element.id))\n    });\n\n\n  }\n\n  return (\n    <>\n      <DenseAppBar />\n      <Container>\n        <div className=\"container\">\n\n          <div className=\"main\">\n\n            <form onSubmit={formik.handleSubmit}>\n\n              <TextField\n                id=\"outlined-basic\"\n                name=\"item\"\n                label=\"item\"\n                className=\"box\"\n                value={formik.values.item}\n                onChange={formik.handleChange}\n\n                error={formik.touched.item && Boolean(formik.errors.item)}\n                helperText={formik.touched.item && formik.errors.item}\n\n\n                variant=\"outlined\" />\n\n              <div className=\"btngroup\">\n\n\n                <Button id=\"btn\" variant=\"contained\" color=\"primary\" type=\"submit\">\n                  +\n                </Button>\n\n                <IconButton aria-label=\"delete\" type=\"reset\" id=\"delbtt\" size=\"large\" onClick={deleteAllitems}>\n                  <DeleteIcon id=\"delallbtn\" />\n                </IconButton>\n\n              </div>\n\n            </form>\n\n\n\n            <div className=\"item\">\n              {Data.map((eachUser, i) => {\n\n                return (<div key={i}>\n\n                  <div id=\"cont\">\n\n                    <li>{eachUser.item}</li>\n\n                    <IconButton aria-label=\"delete\" className=\"delbtn\" size=\"small\" onClick={() => { del(eachUser.id) }}>\n                      <DeleteIcon className=\"delicon\" />\n                    </IconButton>\n\n                  </div>\n                  <br />\n                </div>)\n              })}\n            </div>\n\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}